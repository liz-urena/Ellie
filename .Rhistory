#Uses bisection method to find the correct Sigma
#Given V0 X0 etc.
#can produce arbitrary precsision estimates
imp_vol_bisect <- function(x0=0,x1=2, pricefn, X0, V0, k, r, T, epsilon=10^-6,precision=53,iterations=1000,Rmpfr=TRUE,output=FALSE){
  #   Automatically plots f(x) in [x0,x1]
  x<-seq(x0,x1,by = .01)
  y<-rep(0,length(x))
  for (i in x){
  y[i]<-pricefn(sigma=i, X0=X0,k=k,r=r,T=T)-V0
    }
  # print(length(x))
  # print(length(y))
  plot(x,y, type = 'l', ylab = 'f(x)', main = "Region of f(x) = 0")
  abline(0,0)
  #   Check for feasible [x0,x1]
# print(pricefn(sigma=x0, X0=X0,k=k,r=r,T=T)-V0)
# print(pricefn(sigma=x1, X0=X0,k=k,r=r,T=T)-V0)
if(Rmpfr==TRUE){
  if(sign(pricefn(sigma=x0, X0=X0,k=k,r=r,T=T)-V0) == sign(pricefn(sigma=x1, X0=X0,k=k,r=r,T=T)-V0)) {
    print("ERROR: F(X0) and F(X1) are same sign")
    return('Infeasible')
  #   The method itself  
  } else {
        #     Initialing vars at the desired precision
        it<-0
        x0<-mpfr(x0,precision)
        x1<-mpfr(x1,precision)
        epsilon<-mpfr(epsilon, precision)
        x2<-(x0+x1)/2
    while(abs(pricefn(sigma=x2, X0=X0,k=k,r=r,T=T)-V0) >= epsilon & it<=iterations){
      x2<-(x0+x1)/2
      if(sign(pricefn(sigma=x2, X0=X0,k=k,r=r,T=T)-V0) == sign(pricefn(sigma=x1, X0=X0,k=k,r=r,T=T)-V0)) {x1<-x2} else {x0<-x2}
      if(output==TRUE){print(x2)}
      it<-it+1
    }
  }
  if(output==TRUE){
  print("Imp Vol is:")
  print(x2)
  print("Function value is")
  print(pricefn(sigma=x2, X0=X0,k=k,r=r,T=T)-V0)
}
  return(x2)
} else {
  if(sign(pricefn(sigma=x0, X0=X0,k=k,r=r,T=T)-V0) == sign(pricefn(sigma=x1, X0=X0,k=k,r=r,T=T)-V0)) {
    print("ERROR: F(X0) and F(X1) are same sign")
    return('Infeasible')
  #   The method itself  
  } else {
        #     Initialing vars at the desired precision
        it<-0
        x2<-(x0+x1)/2
    while(abs(pricefn(sigma=x2, X0=X0,k=k,r=r,T=T)-V0) >= epsilon & it<=iterations){
      x2<-(x0+x1)/2
      if(sign(pricefn(sigma=x2, X0=X0,k=k,r=r,T=T)-V0) == sign(pricefn(sigma=x1, X0=X0,k=k,r=r,T=T)-V0)) {x1<-x2} else {x0<-x2}
      if(output==TRUE){print(x2)}
      it<-it+1
    }
  }
  if(output==TRUE){
  print("Imp Vol is:")
  print(x2)
  print("Function value is")
  print(pricefn(sigma=x2, X0=X0,k=k,r=r,T=T)-V0)
}
  return(x2)
}
}
getFullOptionChain<-function(symbol=NULL,Expiries=c('2013/04/16','2013/05/16','2013/06/16','2013/07/16','2013/10/16','2014/01/16','2015/01/16')){
df<-data.frame(Exp=c(0),Strike=c(0),Mkt_Price=c(0))
for(i in 1:length(Expiries)){
print(i)
tmp<-getOptionChain(symbol,Exp=as.Date(Expiries[i]))
rn<-row.names(tmp$calls)
reg<-regexpr("13....|14....|15...." ,rn)
exps<-c()
for(j in 1:length(rn)){
tmp3<-substr(rn[j],reg[j],reg[j]+5)
exps<-append(exps,as.Date(paste('20',substr(tmp3,1,2),'/',substr(tmp3,3,4),'/',substr(tmp3,5,6),sep='')))
}
tmp2<-cbind(Exp=exps,
Strike=c(tmp$calls$Strike),
Mkt_Price=c((tmp$calls$Bid+tmp$calls$Bid)/2))
df<-rbind(df,tmp2)
}
df$Exp<-as.Date(df$Exp)
df$Time_to_Exp <- df$Exp-Sys.Date()
return(df[2:length(df[,1]),])
}
calcAllImpVol<-function(df,X0,r,Rmpfr=FALSE){
tmp<-rep(0,length(df[,1]))
for(i in 1:length(df[,1])){
print(paste('Line number:',i))
tmp[i]<-as.numeric(imp_vol_bisect(pricefn=bs,
X0=X0,
r=r,
k=df$Strike[i],
T=as.numeric(df$Time_to_Exp[i])/365,
V0=df$Mkt_Price[i],
Rmpfr=Rmpfr))
}
df$ImpVol<-tmp
return(df)
}
#####################################################################
#
#Start of MC-Derived Pricers and Tools
#
#####################################################################
#Tool for building n x m array of n asset price paths
#of m+1 steps each.  Terminal asset prices are thus the
#m+1th column of the array
#limiting speed factor is the cumulative product along the rows
#need to find a way to parallalize if we want this routine to 
#execute faster
bs_exact_increments<-function(X0,sigma,r,T,dt,z){
tmp<-exp((r-(sigma^2)/2)*(dt)+sigma*sqrt(dt)*z)
return(tmp)
}
bs_uc_ef_increments<-function(X0,sigma,r,T,z){
tmp<-1+r*dt+sigma*sqrt(dt)*z
return(tmp)
}
price_process_exact_bs<-function(X0,sigma,r,T,k,Nstep, Nrep,full_paths=FALSE,antithetic=FALSE,mpi=FALSE){
#Generates a n x m matrix of i.i.d. GMB(r-sigma^2/2,sigma)
if(antithetic==FALSE){
rand<-array(exp((r-(sigma^2)/2)*(T/(Nstep))+sigma*sqrt(T/(Nstep))*rnorm(Nstep*Nrep, mean=0,sd=1)),dim=c(Nrep,Nstep))
XT<-cbind(rep(X0,Nrep), rand)
print('Increments Complete')
#XT<-cbind(rep(X0,Nrep),XT)
if(mpi==FALSE){
if(full_paths==TRUE){
XT1<-t(apply(XT,1,'cumprod'))
print('Product Step Complete')
return(XT1)
}
if(full_paths==FALSE){
XT1<-apply(XT,1,'prod')
XT[,Nstep+1]<-XT1
print('Product Step Complete')
return(XT)
}
} 
if(mpi==TRUE){
if(full_paths==TRUE){
XT1<-t(mpi.parApply(XT,1,'cumprod'))
print('Product Step Complete')
return(XT1)
}
if(full_paths==FALSE){
XT1<-mpi.parApply(XT,1,'prod')
XT[,Nstep+1]<-XT1
print('Product Step Complete')
return(XT)
}
} 
}
if(antithetic==TRUE){
z<-array(rnorm(Nstep*(Nrep/2), mean=0,sd=1),dim=c((Nrep/2),Nstep))
a1<-array(exp((r-(sigma^2)/2)*(T/(Nstep))+sigma*sqrt(T/(Nstep))*z),dim=c((Nrep/2),Nstep))
a2<-array(exp((r-(sigma^2)/2)*(T/(Nstep))+sigma*sqrt(T/(Nstep))*(-z)),dim=c((Nrep/2),Nstep))
# print(cov(a1[,Nstep],a2[,Nstep]))
rand2<-rbind(a1,a2)
XT<-cbind(rep(X0,Nrep), rand2)
print('Increments Complete')
# print(cov(exp(-r*T)*pmax(100*a1[,Nstep]-k,0),exp(-r*T)*pmax(100*a2[,Nstep]-k,0)))
# print(sd(c(exp(-r*T)*pmax(100*a1[,Nstep]-k,0),exp(-r*T)*pmax(100*a2[,Nstep]-k,0))/sqrt(Nrep)))
#XT<-cbind(rep(X0,Nrep),XT)
if(mpi==FALSE){
if(full_paths==TRUE){
XT1<-t(apply(XT,1,'cumprod'))
print('Product Step Complete')
return(XT1)
}
if(full_paths==FALSE){
XT1<-apply(XT,1,'prod')
XT[,Nstep+1]<-XT1
print('Product Step Complete')
return(XT)
}
} 
if(mpi==TRUE){
if(full_paths==TRUE){
XT1<-t(mpi.parApply(XT,1,'cumprod'))
print('Product Step Complete')
return(XT1)
}
if(full_paths==FALSE){
XT1<-mpi.parApply(XT,1,'prod')
XT[,Nstep+1]<-XT1
print('Product Step Complete')
return(XT)
}
}
}
}
#Specific application of the asset path generator above.  Builds
mc_eur<-function(X0,sigma,T,r,k,Nrep,Nstep, output=FALSE,antithetic=FALSE,mpi=FALSE){
pricepaths<-price_process_exact_bs(X0,sigma,r,T,k,Nstep,Nrep,full_paths=FALSE,antithetic=antithetic,mpi=mpi)
payoffs<-exp(-r*T)*pmax(pricepaths[,Nstep+1]-k,0)
print('Payoffs Discounted')
discountedExpectedValue<-mean(payoffs)
SD_discountedExpectedValue<-sd(payoffs)
if(output==TRUE){
print("B-S Value")
print(bs(X0,k,sigma,r,T))
print("MC Value")
print(discountedExpectedValue)
print("Standard Error MC Value")
print(SD_discountedExpectedValue/sqrt(Nrep))
print("99% CI")
print(paste('(',discountedExpectedValue-2.58*SD_discountedExpectedValue/sqrt(Nrep),',',discountedExpectedValue+ 2.58*SD_discountedExpectedValue/sqrt(Nrep),')',sep=''))
}
return(discountedExpectedValue)
}
mc_sum<-function(fun,X0,sigma,T,r,k,Nrep,Nstep,Nsample, output=TRUE, mpi=FALSE){
#Defining a Dummny Function so that apply will
#have something to call
new_mc_price_fn<-function(i){
p<-i*fun(X0=X0,sigma=sigma,T=T,
r=r,k=k,Nrep=Nrep,Nstep=Nstep,output=output)
return(p)
}
#Non-parallel version
# for(i in 1:Nsample){
# print(i)
# p[i]<-mc_eur(X0,sigma,T,r,k,Nrep,Nstep)
# }
if(mpi==TRUE){
p2<-mpi.parReplicate(Nsample, fun(X0=X0,sigma=sigma,T=T,
r=r,k=k,Nrep=Nrep,Nstep=Nstep,output=output))
} else {
p2<-sapply(rep(1,Nsample),new_mc_price_fn)
}
if(output==TRUE){
print('Mean MC Price')
print(mean(p2))
print('SD MC Price')
print(sd(p2))
print("B-S Price")
print(bs(X0,k,sigma,r,T))
}
return(p2)
}
price_surf<-function(fun,X0=100,sigma=.25,r=.0025,
Nrep=1000,Nstep=1,Nsample=10,output=TRUE,mpi=TRUE,
tstep, tmin, tmax,
kstep, kmin, kmax){
#Initalize the array + indicies
T<-seq(tmin,tmax,by=tstep)
k<-seq(kmin,kmax,by=kstep)
price_surface<-array(1,dim = c(length(T)*length(k),Nsample+4))
#Loops over expiry and strike to
#generate a pricing surface.
#need to rewrite as a general case function taking
#arbitrary pricing functions +
#iterating over different combinations of 
#inputs.
c<-1
for(i in T){
for(j in k){
test<-mc_sum(fun=fun,
X0=X0,
sigma=sigma,
T=i,
r=r,
k=j,
Nrep=Nrep,
Nstep=Nstep,
Nsample=Nsample,
output=output,
mpi=mpi)
price_surface[c,]<-c(i,j,mean(test),sd(test),test)
print(c)
c<-c+1
}
print(i)
}
return(price_surface)
}
eur_opt_price_fast<-function(X0,sigma,r,T,k,Nrep,output=TRUE,antithetic=TRUE,mpi=FALSE){
if(mpi == FALSE){
if(antithetic==FALSE){
out<-.C('eur_payoffs',x=as.double(X0),T=as.double(T),k=as.double(k),r=as.double(r),s=as.double(sigma),z=as.double(rnorm(Nrep)),N=as.integer(Nrep))
out<-unlist(out[6])
}
if(antithetic==TRUE){
N2<-Nrep
Z<-rnorm(N2)
mZ= -Z
out1<-.C('eur_payoffs',x=as.double(X0),T=as.double(T),k=as.double(k),r=as.double(r),s=as.double(sigma),z=as.double(Z),N=as.integer(N2))
out1<-unlist(out1[6])
out2<-.C('eur_payoffs',x=as.double(X0),T=as.double(T),k=as.double(k),r=as.double(r),s=as.double(sigma),z=as.double(mZ),N=as.integer(N2))
out2<-unlist(out2[6])
out<-c(out1,out2)
print(cov(out1,out2))
}
}
if(mpi==TRUE){
n<-mpi.comm.size()
if(antithetic==FALSE){
out<-c(mpi.parReplicate(n,.C('eur_payoffs',x=as.double(X0),T=as.double(T),k=as.double(k),r=as.double(r),s=as.double(sigma),z=as.double(rnorm(Nrep/n)),N=as.integer(Nrep/n))$z))
}
if(antithetic==TRUE){
N2<-Nrep
Z<-rnorm(N2)
mZ= -Z
out1<-c(mpi.parReplicate(n,.C('eur_payoffs',x=as.double(X0),T=as.double(T),k=as.double(k),r=as.double(r),s=as.double(sigma),z=as.double(Z),N=as.integer(Nrep/n))$z))
out2<-c(mpi.parReplicate(n,.C('eur_payoffs',x=as.double(X0),T=as.double(T),k=as.double(k),r=as.double(r),s=as.double(sigma),z=as.double(mZ),N=as.integer(Nrep/n))$z))
out<-c(out1,out2)
print(cov(out1,out2))
}
}
price<-mean(out)
se<-sd(out)/sqrt(Nrep)
if(output==TRUE){
hist((out[which(out!=0)]),breaks=50)
print("B-S Value")
print(bs(X0,k,sigma,r,T))
print("MC Value")
print(price)
print("Standard Error MC Value")
print(se)
print("99% CI")
print(paste('(',price-2.58*se,',',price+ 2.58*se,')',sep=''))
}
}
asian_opt_fs_price_fast<-function(X0,sigma,r,T,k,Nrep,Nstep,output=TRUE,antithetic=TRUE,mpi=FALSE){
if(mpi == FALSE){
if(antithetic==FALSE){
z<-rnorm(Nrep*(Nstep+1))
print('Zs Complete')
cout<-.C('asian_payoffs_fs', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(z),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep),as.integer(Nstep))
out<-cout[[7]]
}
if(antithetic==TRUE){
z<-rnorm(Nrep*(Nstep+1))
mz= -z
cout1<-.C('asian_payoffs_fs', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(z),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep),as.integer(Nstep))
out1<-cout1[[7]]
cout2<-.C('asian_payoffs_fs', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(mz),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep),as.integer(Nstep))
out2<-cout2[[7]]
out<-c(out1,out2)
print(cov(out1,out2))
}
}
if(mpi==TRUE){
n<-mpi.comm.size()
z<-rnorm((Nrep/n)*(Nstep+1))
if(antithetic==FALSE){
cout<-c(mpi.parReplicate(n,.C('asian_payoffs_fs', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(rnorm((Nrep/n)*(Nstep+1))),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep/n),as.integer(Nstep))))
out<-cout[[7]]
}
if(antithetic==TRUE){
z<-rnorm((Nrep/n)*(Nstep+1))
mz= -z
cout1<-c(mpi.parReplicate(n,.C('asian_payoffs_fs', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(rnorm((Nrep/n)*(Nstep+1))),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep/n),as.integer(Nstep))))
cout2<-c(mpi.parReplicate(n,.C('asian_payoffs_fs', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(z),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep/n),as.integer(Nstep))))
out<-c(cout1[[7]],cout2[[7]])
print(cov(cout1[[7]],cout2[[7]]))
}
}
price<-mean(out)
se<-sd(out)/sqrt(Nrep)
if(output==TRUE){
hist((out[which(out!=0)]),breaks=50)
print("B-S Value")
print(bs(X0,k,sigma,r,T))
print("MC Value")
print(price)
print("Standard Error MC Value")
print(se)
print("99% CI")
print(paste('(',price-2.58*se,',',price+ 2.58*se,')',sep=''))
}
}
asian_opt_cont_price_fast<-function(X0,sigma,r,T,k,Nrep,Nstep,output=TRUE,antithetic=TRUE,mpi=FALSE){
if(mpi == FALSE){
if(antithetic==FALSE){
z<-rnorm(Nrep*(Nstep+1))
print('Zs Complete')
cout<-.C('asian_payoffs_cont', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(z),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep),as.integer(Nstep))
out<-cout[[7]]
}
if(antithetic==TRUE){
z<-rnorm(Nrep*(Nstep+1))
mz= -z
cout1<-.C('asian_payoffs_cont', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(z),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep),as.integer(Nstep))
out1<-cout1[[7]]
cout2<-.C('asian_payoffs_cont', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(mz),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep),as.integer(Nstep))
out2<-cout2[[7]]
out<-c(out1,out2)
print(cov(out1,out2))
}
}
if(mpi==TRUE){
n<-mpi.comm.size()
z<-rnorm((Nrep/n)*(Nstep+1))
if(antithetic==FALSE){
cout<-c(mpi.parReplicate(n,.C('asian_payoffs_cont', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(rnorm((Nrep/n)*(Nstep+1))),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep/n),as.integer(Nstep))))
out<-cout[[7]]
}
if(antithetic==TRUE){
z<-rnorm((Nrep/n)*(Nstep+1))
mz= -z
cout1<-c(mpi.parReplicate(n,.C('asian_payoffs_cont', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(rnorm((Nrep/n)*(Nstep+1))),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep/n),as.integer(Nstep))))
cout2<-c(mpi.parReplicate(n,.C('asian_payoffs_cont', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(z),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep/n),as.integer(Nstep))))
out<-c(cout1[[7]],cout2[[7]])
print(cov(cout1[[7]],cout2[[7]]))
}
}
price<-mean(out)
se<-sd(out)/sqrt(Nrep)
if(output==TRUE){
#hist((out[which(out!=0)]),breaks=50)
print("B-S Value")
print(bs(X0,k,sigma,r,T))
print("MC Value")
print(price)
print("Standard Error MC Value")
print(se)
print("99% CI")
print(paste('(',price-2.58*se,',',price+ 2.58*se,')',sep=''))
}
}
eur_opt_price_fast_heston<-function(X0,sigma,r,T,k,v,vbar,gamma,lambda,Nrep,Nstep,output=TRUE,antithetic=TRUE,mpi=FALSE){
LT<-array(c(1,0,-1,0),dim=c(2,2))
if(mpi==FALSE){
Z<-cbind(rnorm(Nrep*(Nstep)),rnorm(Nrep*(Nstep)))
Z<-Z %*% LT
z<-Z[,1]
w<-Z[,2]
print('Zs Complete')
cout<-.C('eur_payoffs_heston', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(v),as.double(vbar),as.double(gamma),as.double(lambda),as.double(z),as.double(w),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep),as.integer(Nstep))
out<-cout[[12]]
}
if(mpi==TRUE){
n<-mpi.comm.size()
mpi.bcast.Robj2slave(LT)
mpi.bcast.cmd(Z<-cbind(rnorm((Nrep/2)*(Nstep)),rnorm((Nrep/2)*(Nstep)))
)
mpi.bcast.cmd(Z<-Z %*% LT)
mpi.bcast.cmd(z<-Z[,1])
mpi.bcast.cmd(w<-Z[,2])
mpi.bcast.Robj2slave(X0)
mpi.bcast.Robj2slave(T)
mpi.bcast.Robj2slave(k)
mpi.bcast.Robj2slave(r)
mpi.bcast.Robj2slave(sigma)
mpi.bcast.Robj2slave(v)
mpi.bcast.Robj2slave(vbar)
mpi.bcast.Robj2slave(gamma)
mpi.bcast.Robj2slave(lambda)
mpi.bcast.Robj2slave(Nrep)
mpi.bcast.Robj2slave(Nstep)
print('Zs Complete')
cout<-mpi.remote.exec(.C('eur_payoffs_heston', as.double(X0),as.double(T),as.double(k),as.double(r),as.double(sigma),as.double(v),as.double(vbar),as.double(gamma),as.double(lambda),as.double(z),as.double(w),as.double(rep(0,Nrep)),as.double(T/Nstep),as.integer(Nrep),as.integer(Nstep))[[12]])
}
price<-mean(out)
se<-sd(out)/sqrt(Nrep)
if(output==TRUE){
#hist((out[which(out!=0)]),breaks=50)
print("B-S Value")
print(bs(X0,k,sigma,r,T))
print("MC Value")
print(price)
print("Standard Error MC Value")
print(se)
print("99% CI")
print(paste('(',price-2.58*se,',',price+ 2.58*se,')',sep=''))
print("BS Implied Vol")
print(imp_vol_bisect(x0=0,x1=2,bs,X0,price,k,r,T,Rmpfr=FALSE,output=FALSE))
return(cout)
}
}
dyn.load("eur_payoffs_heston.so")
dyn.load("eur_payoffs.so")
dyn.load("asian_payoffs_fs.so")
dyn.load("asian_payoffs_cont.so")
mpi.spawn.Rslaves()
mpi.setup.rngstream()
mpi.bcast.Robj2slave(bs)
mpi.bcast.Robj2slave(price_process_exact_bs)
mpi.bcast.Robj2slave(mc_eur)
mpi.bcast.Robj2slave(mc_sum)
mpi.bcast.Robj2slave(price_surf)
mpi.remote.exec(dyn.load('eur_payoffs.so'))
mpi.remote.exec(dyn.load("eur_payoffs_heston.so"))
mpi.remote.exec(dyn.load("asian_payoffs_fs.so"))
mpi.remote.exec(dyn.load("asian_payoffs_cont.so")
)
#To Do - 
#Write a vol surface calculator for general
#stocks using getOptionChain(), the ImpVol calc
#and double loop as above.  
#
#Parallalize the price and vol surface calculators
#
#Implement more option pricers for exotic path-dependent
#
#DONE FIND OUT WHY THE EURO MC PRICER IS UNDERSHOOTING BY
#A LITTLE BIT.  
#
#DONE Set up a way to diff() a BS pricing surface
#and a MC pricing surface to look for the discrepencies. 
#
#Find an AMI for commandline R. - DONE
#
#Start building Greeks Calculators for Euro options
#as a test case, but using finite difference etc s.t. 
#they can be applied to non-analytic functions. 
quit()
